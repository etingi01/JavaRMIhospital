
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.Date;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
 
/**
 * ProvinceClient: client application
 * @author http://lycog.com
 */
public class ProvinceClient {
	public Registry registry;
	public IRemoteProvince rp;
	public IRemoteAstheneis as;
	public IRemoteAstheneisAllergies al;
	public IRemoteAstheneisTravma at;
	public IRemoteComments com;
	public IRemoteWarnings warn;
	public IRemoteRisk risk;
	public IRemoteEidiIpallilwn eidiYpal;
	public IRemoteIstorikoTherapeias istoriko;
	public IRemotePatientAstheneies patientAsth;
	public IRemoteSiggenisAstheni siggenis;
	public IRemoteTherapeia therapeia;
	public IRemoteTherapeiesAstheneies therapeiesAstheneies;
	public  IRemoteConsultation consultation;
	public IRemoteTypeAstheneias typeAsth;
	
	public ProvinceClient() throws RemoteException, NotBoundException{
	       registry = LocateRegistry.getRegistry("127.0.0.1");

	       //Lookup server object
	       rp = (IRemoteProvince) registry.lookup("Province");
	       as = (IRemoteAstheneis) registry.lookup("Astheneis");
	       al = (IRemoteAstheneisAllergies) registry.lookup("AstheneisAllergies");
	       at = (IRemoteAstheneisTravma) registry.lookup("AstheneisTravma");
	       com = (IRemoteComments) registry.lookup("comments");
	       warn= (IRemoteWarnings) registry.lookup("warnings");
	       risk = (IRemoteRisk) registry.lookup("risk");
	       eidiYpal = (IRemoteEidiIpallilwn) registry.lookup("eidiYpallilwn");
	       istoriko = (IRemoteIstorikoTherapeias) registry.lookup("istoriko");
	       patientAsth = (IRemotePatientAstheneies) registry.lookup("patientAstheneies");
	       siggenis = (IRemoteSiggenisAstheni) registry.lookup("siggeneis");
	       therapeia = (IRemoteTherapeia) registry.lookup("therapeia");
	       therapeiesAstheneies = (IRemoteTherapeiesAstheneies) registry.lookup("therapeiaAstheneies");
	       consultation = (IRemoteConsultation) registry.lookup("consult");
	       typeAsth = (IRemoteTypeAstheneias) registry.lookup("typeAstheneias");
	       
	}
	
	
	
  public static void main(String[] args) {
    try {
      //Get reference to rmi registry server
    	//System.setProperty("java.rmi.server.hostname","127.0.0.1");
      /* al = (IRemoteAstheneisAllergies) registry.lookup("AstheneisAllergies");
       at = (IRemoteAstheneisTravma) registry.lookup("AstheneisTravma");
       com = (IRemoteComments) registry.lookup("comments");
      warn= (IRemoteWarnings) registry.lookup("warnings");
       risk = (IRemoteRisk) registry.lookup("risk");
       eidiYpal = (IRemoteEidiIpallilwn) registry.lookup("eidiYpallilwn");
       istoriko = (IRemoteIstorikoTherapeias) registry.lookup("istoriko");
      patientAsth = (IRemotePatientAstheneies) registry.lookup("patientAstheneies");
      siggenis = (IRemoteSiggenisAstheni) registry.lookup("siggeneis");
      therapeia = (IRemoteTherapeia) registry.lookup("therapeia");
      therapeiesAstheneies = (IRemoteTherapeiesAstheneies) registry.lookup("therapeiaAstheneies");
      consultation = (IRemoteConsultation) registry.lookup("consult");
      typeAsth = (IRemoteTypeAstheneias) registry.lookup("typeAstheneias");*/
     
      
      
      //Save province
    	Province bmc = new Province(8282, "rlouka01", "Rafaellita", "Louka", "99394781" , "rafkiola@gmail.com", 2);
      	System.out.println("Saving provinces...");
      //rp.save(bmc);
      	ProvinceClient antikeimeno = new ProvinceClient();

      
	    String user = JOptionPane.showInputDialog(null,"Δώστε το username σας");
	    
	    if (user != null){
	        while ((antikeimeno.rp.findByUsername(user).getPassword()==0) && (user != null)){
	         user = JOptionPane.showInputDialog("Δώσατε μη υπαρκτό username.\n Δώστε ξανά το username σας");

	        }
	        
	        if (user != null){

	            String pass = JOptionPane.showInputDialog("Δώστε τον κωδικό σας");
	            int passwd = Integer.parseInt(pass);
	            int passwordofIpallilos = antikeimeno.rp.findByUsername(user).getPassword();
	            
	            System.out.println(passwordofIpallilos);
	            while ((passwd!=passwordofIpallilos) && (user != null)){
	            user = JOptionPane.showInputDialog("Δώσατε λάθος κωδικό. Επαναλάβετε τη διαδικασία. \n Δώστε το username σας");
	            while ((antikeimeno.rp.findByUsername(user).getPassword()==0)  && (user != null)){
	             user = JOptionPane.showInputDialog("Δώσατε μη υπαρκτό username.\n Δώστε ξανά το username σας");
	            }
	            if (user != null){
	            pass = JOptionPane.showInputDialog("Δώστε τον κωδικό σας");
	            passwd = Integer.parseInt(pass);
	            passwordofIpallilos = antikeimeno.rp.findByUsername(user).getPassword();
	            } 
	            }
	            }
	    }
	        
	        
	    Province ipallilos = new Province();
	    ipallilos=antikeimeno.rp.findByUsername(user);
	    
	    switch (ipallilos.getCodeType()){
	    
	    case 1:
	    		antikeimeno.EpifaneiaReceptionist(ipallilos);
	    		break;
	    case 2: antikeimeno.EpifaneiaDoctor(ipallilos);
	    		break;
	    
	    }
	    
	    

    } catch (Exception e) {
        System.out.println(e);
      }
  }
	public  void MenuButtons(){
		JFrame fm = new JFrame ("Menu");
	    fm.setLayout( new FlowLayout() );      // set the layout manager
   	    fm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   	    JButton appointment = new JButton("Προσθήκη Ραντεβού"); // construct a JButton
	    JButton viewApp = new JButton("Προεπισκόπηση Ραντεβού");
	    JButton search = new JButton("Αναζήτηση Εγγραφής");
	    JButton allPatient = new JButton ("Όλοι οι ασθενείς");		
	    fm.getContentPane().add(appointment);
	    fm.getContentPane().add(viewApp);
	    fm.getContentPane().add(search);
	    fm.getContentPane().add(allPatient);
	    fm.pack();
   	    fm.setSize( 500, 250);     
   	    fm.setVisible( true ); 
   	 appointment.addActionListener(new ActionListener() {
	    	
            public void actionPerformed(ActionEvent e)
            {
            	try {
					appointment();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
            }
        });  
   	viewApp.addActionListener(new ActionListener() {
	    	
            public void actionPerformed(ActionEvent e)
            {
            	viewApp();
            }
        });  
   	 
   	search.addActionListener(new ActionListener() {
	    	
            public void actionPerformed(ActionEvent e)
            {
            	try {
					search();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                System.out.println("Irthe edw");
            }
        });  
   	allPatient.addActionListener(new ActionListener() {
	    	 
            public void actionPerformed(ActionEvent e)
            {
                //Execute when button is pressed
            	try {
					allPatient();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
               System.out.println("prosthiki");
            }
        });  
	}
  public void EpifaneiaReceptionist(Province ipallilos){
	  MenuButtons();
	  
  }
  
  
  public void allPatient() throws RemoteException, ClassNotFoundException{
	  
		JFrame frame = new JFrame("Όλοι οι Ασθενείς: ");
		

        frame.setLayout(new BorderLayout());
        String [] categories= {"Όνομα" , "Επώνυμο" , "ID" , "Τηλέφωνο" , "Διεύθυνση" , "Email", "Στοιχεία Συγγενή"};
        ArrayList<Astheneis> arr = as.findAll();
        String[][] data = new String[arr.size()][7];

        for (int j=0; j<arr.size(); j++){
        	Astheneis p = arr.get(j);
        	data[j][0] = p.getOnoma();
        	data[j][1] = p.getEpwnimo();
        	data[j][2] = ""+p.getIdAstheneis();
        	data[j][3] = p.getTilefwno();
        	data[j][4] = p.getDiefthinsi();
        	data[j][5] = p.getEmail();
        	SiggenisAstheni sig = siggenis.findByKodikosArrostou(p.getIdAstheneis());
        	data[j][6] = sig.getOnomaSiggeni() + " \n\n " + sig.getTiliefonoSiggeni();
        }
        
        final JTable table = new JTable(data, categories);
        JScrollPane scrollPane = new JScrollPane(table);
        table.setFillsViewportHeight(true);
        frame.getContentPane().setLayout(new BorderLayout());
        frame.getContentPane().add(scrollPane,BorderLayout.CENTER);
        frame.setSize(1200, 550);
        frame.setVisible(true);
  }
    public void search() throws RemoteException, ClassNotFoundException{
	  String searchword = JOptionPane.showInputDialog(null, "Aναζητήστε Ασθενείς:");
	  ArrayList<Astheneis> arr = as.findAll();
		JFrame frame = new JFrame("Aποτελέσματα Αναζήτησης: ");

        frame.setLayout(new BorderLayout());
        String [] categories= {"Όνομα" , "Επώνυμο" , "ID" , "Τηλέφωνο" , "Διεύθυνση" , "Email", "Στοιχεία Συγγενή"};
        String[][] data = new String[arr.size()][7];
        for (int j=0; j<arr.size(); j++){
        	Astheneis p = arr.get(j);
        	if (p.getOnoma().contains(searchword)||p.getEpwnimo().contains(searchword)||searchword.contains(p.getOnoma())||searchword.contains(p.getEpwnimo())){
        	data[j][0] = p.getOnoma();
        	data[j][1] = p.getEpwnimo();
        	data[j][2] = ""+p.getIdAstheneis();
        	data[j][3] = p.getTilefwno();
        	data[j][4] = p.getDiefthinsi();
        	data[j][5] = p.getEmail();
        	SiggenisAstheni sig = siggenis.findByKodikosArrostou(p.getIdAstheneis());
        	data[j][6] = sig.getOnomaSiggeni() + " \n\n " + sig.getTiliefonoSiggeni();
        	}
        }
        
        final JTable table = new JTable(data, categories);
        JScrollPane scrollPane = new JScrollPane(table);
        table.setFillsViewportHeight(true);
        frame.getContentPane().setLayout(new BorderLayout());
        frame.getContentPane().add(scrollPane,BorderLayout.CENTER);
        frame.setSize(1200, 550);
        frame.setVisible(true);
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
  }
    
    
    
  public void appointment() throws RemoteException, ClassNotFoundException{
	  
	  	ArrayList<Astheneis> arr = as.findAll();
	      JComboBox comboBox = new JComboBox();
	      for (int j=0; j<arr.size(); j++){
	      comboBox.addItem(arr.get(j).getOnoma() + " " + arr.get(j).getEpwnimo() + " id: " + arr.get(j).getIdAstheneis());
	      }
	      JComboBox doc = new JComboBox();
	      ArrayList<Province> arrd = rp.findAll();
	      for (int j=0; j<arr.size(); j++){
	    	  if (arrd.get(j).getCodeType()==2)
	    	  doc.addItem(arrd.get(j).getOnoma() + " " + arrd.get(j).getEpwnimo() + " " + arrd.get(j).getUsername());
	      }

	      
	      JTextField imerominia = new JTextField();
        JTextField wra = new JTextField();
       
	    	 Object[] message = {
	            	"Όνοματεπώνυμο Ασθενή: ", comboBox,
	            	"Oνοματεπώνυμο Γιατρού: ", doc,
	            	"Ημερομηνία: ", imerominia,
	            	"Ώρα: ", wra
	            	
	            };
	    	 
	    	 
	    	 int option = JOptionPane.showConfirmDialog(null, message, "Δημιουργία Ραντεβού", JOptionPane.OK_CANCEL_OPTION);
	         if (option == JOptionPane.OK_OPTION) {
	        	 	String asthe[]=comboBox.getSelectedItem().toString().split(" ");
	        	 	int kod = Integer.parseInt(asthe[3]);
	        	 	String gia[] = doc.getSelectedItem().toString().split(" ");
	        	 	String usern = gia[2];
	        	 	Date imer = Date.valueOf(imerominia.getText());
	        	 	String ora = wra.getText();
	        	 	Consultation d = new Consultation();
	        	 	d.setDoctorusername(usern);
	        	 	d.setImerominiaConsultation(imer);
	        	 	d.setKodPatient(kod);
	        	 	d.setOra(ora);
	        	 	consultation.save(d);
	        	 	
	         }
  }
  public void viewApp(){
		JFrame fm = new JFrame ("Menu Appointments");
	    fm.setLayout( new FlowLayout() );      // set the layout manager
   	    //fm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   	    JButton allApp = new JButton("Όλα τα Ραντεβού"); // construct a JButton
	    JButton appDate = new JButton("Εύρεση ανά Ημερομηνία");
	    JButton astApp = new JButton("Εύρεση ανά Ασθενή");
	    fm.getContentPane().add(allApp);
	    fm.getContentPane().add(appDate);
	    fm.getContentPane().add(astApp);
	    fm.pack();
   	    fm.setSize( 250, 250);     
   	    fm.setVisible( true ); 
   	    allApp.addActionListener(new ActionListener() {
 	    	
             public void actionPerformed(ActionEvent e)
             {
            	 try {
					allApp();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
             }
         });  
   	    appDate.addActionListener(new ActionListener() {
	    	
         public void actionPerformed(ActionEvent e)
         {
        	 try {
				appDate();
			} catch (RemoteException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
         }
   	    });  
   	    astApp.addActionListener(new ActionListener() {
	    	
        public void actionPerformed(ActionEvent e)
        {
        	try {
				astApp();
			} catch (NumberFormatException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (RemoteException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
        }
   	    });  
  }
  
  public void allApp() throws RemoteException, ClassNotFoundException{
	  JFrame frame = new JFrame("Όλα τα ραντεβού: ");
      frame.setLayout(new BorderLayout());
      String [] categories= {"iD Ασθενή" , "Ονοματεπώνυμο" , "Γιατρός Επίσκεψης" , "Ημερομηνία" , "Ώρα" , "Εμφανίστηκε ή όχι"};
      final ArrayList<Consultation> arr = consultation.findAll();
      String[][] data = new String[arr.size()][7];

      for (int j=0; j<arr.size(); j++){
      	Consultation p = arr.get(j);
      	data[j][0] = "" + p.getKodPatient();
      	Astheneis b = as.findById(p.getKodPatient());
      	data[j][1] = b.getOnoma() +  " " + b.getEpwnimo();
      	Province doctor = rp.findByUsername(p.getDoctorusername());
      	data[j][2] = ""+doctor.getOnoma()+" "+ doctor.getEpwnimo();
      	data[j][3] = p.getImerominiaConsultation().toString();
      	data[j][4] = p.getOra();
      	if (p.getEmfanistike()==0)
      	data[j][5] = "Επιλέξτε αν εμφανίστηκε ή όχι ο ασθενής στο ραντεβού";
      	if (p.getEmfanistike()==-1)
          	data[j][5] = "Δεν παρευρέθηκε";
      	if (p.getEmfanistike()==1)
          	data[j][5] = "Παρευρέθηκε";
      }
      
      final JTable table = new JTable(data, categories);
      JScrollPane scrollPane = new JScrollPane(table);
      table.setFillsViewportHeight(true);
      TableColumn emfanistike = table.getColumnModel().getColumn(5);
      JComboBox comboBox = new JComboBox();
      comboBox.addItem("Παρευρέθηκε");
      comboBox.addItem("Δεν παρευρέθηκε");
      emfanistike.setCellEditor(new DefaultCellEditor(comboBox));
      frame.getContentPane().setLayout(new BorderLayout());
      frame.getContentPane().add(scrollPane,BorderLayout.CENTER);
      frame.setSize(1200, 550);
      frame.setVisible(true);
      frame.addWindowListener(new WindowAdapter()
		  {
		      @Override
		      public void windowClosing(WindowEvent e)
		      {
		          System.out.println("Closed");
		          TableColumn emfanistike = table.getColumnModel().getColumn(2);
		          System.out.println(emfanistike.toString());
		          System.out.println(table.getValueAt(0, 2));
		          
		          for (int j=0; j<arr.size(); j++){
		        	  if (table.getValueAt(j, 5).toString()=="Δεν παρευρέθηκε"){
		        		  Consultation p = arr.get(j);
		        		  p.setEmfanistike(-1);
		        		  try {
							consultation.update(p);
						} catch (RemoteException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
		        	  }
		        	  if (table.getValueAt(j, 5).toString()=="Παρευρέθηκε"){
		        		  Consultation p = arr.get(j);
		        		  p.setEmfanistike(1);
		        		  try {
							consultation.update(p);
						} catch (RemoteException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
		        	  }
		          }
		    
		          e.getWindow().dispose();
		      }
		  });
	  
  }
  public void appDate() throws RemoteException, ClassNotFoundException{
      String pass = JOptionPane.showInputDialog(null, "Δώστε ημερομηνία:");
      final ArrayList<Consultation> arr;
      System.out.println(pass);
      if (pass!=null){
      Date criteria = Date.valueOf(pass);
     arr = consultation.findByImerominia(criteria);
      }else{
     	 JOptionPane.showMessageDialog(null, "Δεν βρέθηκαν ραντεβού για την ημερομηνία που καταχωρήσατε");
   	  return;

      }
      if (arr.size()==0){
    	 JOptionPane.showMessageDialog(null, "Δεν βρέθηκαν ραντεβού για την ημερομηνία που καταχωρήσατε");
    	  return;
      }
	  JFrame frame = new JFrame("Rαντεβού ανά ημερομηνία: ");
      frame.setLayout(new BorderLayout());
      String [] categories= {"iD Ασθενή" , "Ονοματεπώνυμο" , "Γιατρός Επίσκεψης" , "Ημερομηνία" , "Ώρα" , "Εμφανίστηκε ή όχι"};
      
      String[][] data = new String[arr.size()][7];

      for (int j=0; j<arr.size(); j++){
      	Consultation p = arr.get(j);
      	data[j][0] = "" + p.getKodPatient();
      	Astheneis b = as.findById(p.getKodPatient());
      	data[j][1] = b.getOnoma() +  " " + b.getEpwnimo();
      	Province doctor = rp.findByUsername(p.getDoctorusername());
      	data[j][2] = ""+doctor.getOnoma()+" "+ doctor.getEpwnimo();
      	data[j][3] = p.getImerominiaConsultation().toString();
      	data[j][4] = p.getOra();
      	if (p.getEmfanistike()==0)
      	data[j][5] = "Επιλέξτε αν εμφανίστηκε ή όχι ο ασθενής στο ραντεβού";
      	if (p.getEmfanistike()==-1)
          	data[j][5] = "Δεν παρευρέθηκε";
      	if (p.getEmfanistike()==1)
          	data[j][5] = "Παρευρέθηκε";
      }
      
      final JTable table = new JTable(data, categories);
      JScrollPane scrollPane = new JScrollPane(table);
      table.setFillsViewportHeight(true);
      TableColumn emfanistike = table.getColumnModel().getColumn(5);
      JComboBox comboBox = new JComboBox();
      comboBox.addItem("Παρευρέθηκε");
      comboBox.addItem("Δεν παρευρέθηκε");
      emfanistike.setCellEditor(new DefaultCellEditor(comboBox));
      frame.getContentPane().setLayout(new BorderLayout());
      frame.getContentPane().add(scrollPane,BorderLayout.CENTER);
      frame.setSize(1200, 550);
      frame.setVisible(true);
      frame.addWindowListener(new WindowAdapter()
		  {
		      @Override
		      public void windowClosing(WindowEvent e)
		      {
		          System.out.println("Closed");
		          TableColumn emfanistike = table.getColumnModel().getColumn(2);
		          System.out.println(emfanistike.toString());
		          System.out.println(table.getValueAt(0, 2));
		          
		          for (int j=0; j<arr.size(); j++){
		        	  if (table.getValueAt(j, 5).toString()=="Δεν παρευρέθηκε"){
		        		  Consultation p = arr.get(j);
		        		  p.setEmfanistike(-1);
		        		  try {
							consultation.update(p);
						} catch (RemoteException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
		        	  }
		        	  if (table.getValueAt(j, 5).toString()=="Παρευρέθηκε"){
		        		  Consultation p = arr.get(j);
		        		  p.setEmfanistike(1);
		        		  try {
							consultation.update(p);
						} catch (RemoteException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
		        	  }
		          }
		    
		          e.getWindow().dispose();
		      }
		  });
	  
  }

  
  public void astApp() throws RemoteException, ClassNotFoundException, NumberFormatException, InterruptedException{
      String pass = JOptionPane.showInputDialog(null, "Δώστε τον κωδικό ταυτοποίησης του Ασθενή:");
      final ArrayList<Consultation> arr;
      System.out.println(pass);
      if (pass!=null){
    	  arr = consultation.findByKodPatient(Integer.parseInt(pass));
      }else{
     	 JOptionPane.showMessageDialog(null, "Δεν βρέθηκαν ραντεβού για τον ασθενή που ζητήσατε");
   	  return;

      }
      if (arr.size()==0){
    	 JOptionPane.showMessageDialog(null, "Δεν βρέθηκαν ραντεβού για τον ασθενή που ζητήσατε");
    	  return;
      }
	  JFrame frame = new JFrame("Rαντεβού ανά ημερομηνία: ");
      frame.setLayout(new BorderLayout());
      String [] categories= {"iD Ασθενή" , "Ονοματεπώνυμο" , "Γιατρός Επίσκεψης" , "Ημερομηνία" , "Ώρα" , "Εμφανίστηκε ή όχι"};
      
      String[][] data = new String[arr.size()][7];

      for (int j=0; j<arr.size(); j++){
      	Consultation p = arr.get(j);
      	data[j][0] = "" + p.getKodPatient();
      	Astheneis b = as.findById(p.getKodPatient());
      	data[j][1] = b.getOnoma() +  " " + b.getEpwnimo();
      	Province doctor = rp.findByUsername(p.getDoctorusername());
      	data[j][2] = ""+doctor.getOnoma()+" "+ doctor.getEpwnimo();
      	data[j][3] = p.getImerominiaConsultation().toString();
      	data[j][4] = p.getOra();
      	if (p.getEmfanistike()==0)
      	data[j][5] = "Επιλέξτε αν εμφανίστηκε ή όχι ο ασθενής στο ραντεβού";
      	if (p.getEmfanistike()==-1)
          	data[j][5] = "Δεν παρευρέθηκε";
      	if (p.getEmfanistike()==1)
          	data[j][5] = "Παρευρέθηκε";
      }
      
      final JTable table = new JTable(data, categories);
      JScrollPane scrollPane = new JScrollPane(table);
      table.setFillsViewportHeight(true);
      TableColumn emfanistike = table.getColumnModel().getColumn(5);
      JComboBox comboBox = new JComboBox();
      comboBox.addItem("Παρευρέθηκε");
      comboBox.addItem("Δεν παρευρέθηκε");
      emfanistike.setCellEditor(new DefaultCellEditor(comboBox));
      frame.getContentPane().setLayout(new BorderLayout());
      frame.getContentPane().add(scrollPane,BorderLayout.CENTER);
      frame.setSize(1200, 550);
      frame.setVisible(true);
      frame.addWindowListener(new WindowAdapter()
		  {
		      @Override
		      public void windowClosing(WindowEvent e)
		      {
		          System.out.println("Closed");
		          TableColumn emfanistike = table.getColumnModel().getColumn(2);
		          System.out.println(emfanistike.toString());
		          System.out.println(table.getValueAt(0, 2));
		          
		          for (int j=0; j<arr.size(); j++){
		        	  if (table.getValueAt(j, 5).toString()=="Δεν παρευρέθηκε"){
		        		  Consultation p = arr.get(j);
		        		  p.setEmfanistike(-1);
		        		  try {
							consultation.update(p);
						} catch (RemoteException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
		        	  }
		        	  if (table.getValueAt(j, 5).toString()=="Παρευρέθηκε"){
		        		  Consultation p = arr.get(j);
		        		  p.setEmfanistike(1);
		        		  try {
							consultation.update(p);
						} catch (RemoteException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
		        	  }
		          }
		    
		          e.getWindow().dispose();
		      }
		  });
	  
  }
  public void EpifaneiaDoctor(Province ipallilos){
	  MenuButtonsDoctor(ipallilos);
	  
  }
	public  void MenuButtonsDoctor(final Province ipallilos){
		JFrame fm = new JFrame ("Menu");
	    fm.setLayout( new FlowLayout() );      // set the layout manager
   	    fm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    JButton appDoctor = new JButton("Τα ραντεβού μου - Διάγνωση Ασθενή");
	    JButton sxolia = new JButton("Σχόλια για Ασθενή");
	    JButton epikindinotita = new JButton ("Επικινδυνότητα Ασθενών");
		
	    fm.getContentPane().add(appDoctor);
	    fm.getContentPane().add(sxolia);
	    fm.getContentPane().add(epikindinotita);
	    fm.pack();
   	    fm.setSize( 500, 250);     
   	    fm.setVisible( true ); 
   	    
   	 appDoctor.addActionListener(new ActionListener() {
	    	
            public void actionPerformed(ActionEvent e)
            {
            	try {
					appDoctor(ipallilos);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
            }
        });  
	}

  
 
  
   	 public void appDoctor(final Province ipallilos) throws RemoteException, ClassNotFoundException, InterruptedException{
   		 
 		JFrame frame = new JFrame ("Προβολή των Ραντεβού");
 		frame.setLayout( new FlowLayout() );      // set the layout manager
 		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    	ArrayList<Consultation> allApp = new ArrayList();
    	allApp = consultation.findByDoctorUsername(ipallilos.getUsername());
    		
    	     frame.setLayout(new BorderLayout());
    	        String [] categories= {"Όνοματεπώνυμο Ασθενή" , "Ημερομηνία", "Ώρα"};
    	        ArrayList<Astheneis> arr = as.findAll();
    	        String[][] data = new String[arr.size()][3];

        		for (int j=0; j<allApp.size(); j++){
    	        	Astheneis p = as.findById(allApp.get(j).getKodPatient());
    	        	data[j][0] = p.getOnoma() + " "+ p.getEpwnimo();
    	        	data[j][1] = allApp.get(j).getImerominiaConsultation().toString();
    	        	data[j][2] = allApp.get(j).getOra();
    	        }
    	        
    	        final JTable table = new JTable(data, categories);
    	        JScrollPane scrollPane = new JScrollPane(table);
    	        table.setFillsViewportHeight(true);
    	        frame.getContentPane().setLayout(new BorderLayout());
    	        frame.getContentPane().add(scrollPane,BorderLayout.CENTER);
    	        frame.setSize(1200, 550);
    	        frame.setVisible(true);
    		
    		for (int i=0; i<d.size(); i++){
    			Consultation bb = d.get(i);
         	    JButton DoctorApp = new JButton(patient.getOnoma() + "  " + patient.getEpwnimo() + " - ID:" + patient.getIdAstheneis() + "  - Ημερομηνία Ραντεβού: " + bb.getImerominiaConsultation().toString());
         	    fm.getContentPane().add(DoctorApp);
     	    	fm.pack();
        	    fm.setSize( 600, 600);     
        	    fm.setVisible( true ); 
        	     

         	    

    		}
    	

  
      	
   	 }
   	 public void diagnwsi(final Province ipallilos){
   		 
   		JFrame fm = new JFrame ("Προσθήκη Διάγνωσης");
 	    fm.setLayout( new FlowLayout() );      // set the layout manager
    	fm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	    
   	    JButton addDiagnosis = new JButton("Προσθήκη Διάγνωσης και Θεραπείας");
	    fm.getContentPane().add(addDiagnosis);

   	    fm.setSize( 500, 250);     
   	    fm.setVisible( true ); 

   	 addDiagnosis.addActionListener(new ActionListener() {
	    	
         public void actionPerformed(ActionEvent e)
         {
        	 try {
				prosthikiDiagnosis(ipallilos);
			} catch (RemoteException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
				
         }
      });  
   	 }
  
     public void prosthikiDiagnosis(Province ipallilos) throws RemoteException, ClassNotFoundException{
    	 
    	 ArrayList<PatientAstheneies> allAstheneies = new ArrayList();
    	 ArrayList<Consultation> arr = consultation.findAll();
		 ArrayList<Astheneis> asthe = new ArrayList();
	      JComboBox comboBox = new JComboBox();
	      JComboBox diagnwsis = new JComboBox();

    	 for (int i=0; i<arr.size(); i++){
    		 if (arr.get(i).getDoctorusername()==ipallilos.getUsername()){
    			Astheneis p= as.findById(arr.get(i).getKodPatient());
    			comboBox.addItem(p.getOnoma() + " " + p.getEpwnimo() + " |id: " + p.getIdAstheneis());
    		 }
    	 }
    	 ArrayList<TypeAstheneias> dia = typeAsth.findAll();
    	 for (int i=0; i<dia.size(); i++){
    		 diagnwsis.addItem("Astheneia: " + dia.get(i).getType() + " |id: " + dia.get(i).getIdTypeAstheneias());
    		 }
    	 
    	 Object[] message = {
	            	"Όνοματεπώνυμο Ασθενή: ", comboBox,
	            	"Διάγνωση που θα καταχωρηθεί: ", diagnwsis
	      
	            };
    	 
    	 int option = JOptionPane.showConfirmDialog(null, message, "Eπιλογή Διάγνωσης", JOptionPane.OK_CANCEL_OPTION);
         if (option == JOptionPane.OK_OPTION) {
        	 	String arro[]=comboBox.getSelectedItem().toString().split(" ");
        	 	int kod = Integer.parseInt(arro[3]);
        	 	String gia[] = diagnwsis.getSelectedItem().toString().split(" ");
        	 	String usern = gia[3];
        	 	int idtype = Integer.parseInt(usern);
        	 	PatientAstheneies p = new PatientAstheneies();
        	 	p.setCodeArrwstias(idtype);
        	 	p.setCodeAstheni(kod);
        	 	
        	 	patientAsth.save(p);
        	 	
         }
     }
  



  
}